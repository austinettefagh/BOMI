<apex:page id="ShieldAccelerator" title="Platform Encryption Analyzer" standardStylesheets="false" controller="revcult.ShieldAcceleratorController" showHeader="true" sidebar="false" docType="html-5.0">
<meta charset="utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<title>Platform Encryption Analyzer</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<script>
    var dataFromSF = {
        sldsBase: '{!URLFOR($Asset.SLDS)}',
        getJobProgressData: '{!$RemoteAction.ShieldAcceleratorController.getJobProgressData}',
        createRequest: '{!$RemoteAction.ShieldAcceleratorController.createRequest}',
        appendToRequest: '{!$RemoteAction.ShieldAcceleratorController.appendToRequest}',
        startAnalysis: '{!$RemoteAction.ShieldAcceleratorController.startAnalysis}',
        getUrl: '{!$RemoteAction.ShieldAcceleratorController.getUrl}',
        getAttachment: '{!$RemoteAction.ShieldAcceleratorController.getAttachment}',
        getStatus: '{!$RemoteAction.ShieldAcceleratorController.getStatus}',
        getSeverityLevels: {!$RemoteAction.ShieldAcceleratorController.getSeverityLevels},
        getComplianceCategories: {!$RemoteAction.ShieldAcceleratorController.getComplianceCategories},
        cacheObjectRelationships: {!$RemoteAction.ShieldAcceleratorController.cacheObjectRelationships},
        getInstalledPackages: {!$RemoteAction.ShieldAcceleratorController.getInstalledPackages},
        checkEncryptionStatus: {!$RemoteAction.ShieldAcceleratorController.checkEncryptionStatus},
        getData: {!$RemoteAction.ShieldAcceleratorController.getData},
        getFieldsParallel: '{!$RemoteAction.ShieldAcceleratorController.getFieldsParallel}',
        encryptFields: '{!$RemoteAction.ShieldAcceleratorController.encryptFields}',
        getHistoricFieldsParallel: '{!$RemoteAction.ShieldAcceleratorController.getHistoricFieldsParallel}',
        isUpToDate: '{!$RemoteAction.ShieldAcceleratorController.isUpToDate}',
        getPrintableData: '{!$RemoteAction.ShieldAcceleratorController.getPrintableData}',
        checkSettingsInProgress: '{!$RemoteAction.ShieldAcceleratorController.checkSettingsInProgress}',
        checkUpgrade: {!$RemoteAction.ShieldAcceleratorController.checkUpgrade},
        checkMetadataApi: {!$RemoteAction.ShieldAcceleratorController.checkMetadataAPI},
        checkForExistingJob: '{!$RemoteAction.ShieldAcceleratorController.checkForExistingJob}',
        toggleColumnConfiguration: '{!$RemoteAction.ShieldAcceleratorController.toggleColumnConfiguration}',
        getUserColumnConfigSettings: {!$RemoteAction.ShieldAcceleratorController.getUserColumnConfigSettings},
        getFillRateInfo: {!$RemoteAction.ShieldAcceleratorController.getFillRateInfo},
        getFillRateJobData: {!$RemoteAction.ShieldAcceleratorController.getFillRateJobData},
        updateSessionCache: {!$RemoteAction.ShieldAcceleratorController.updateSessionCache},
        checkAppNavigationCache: {!$RemoteAction.ShieldAcceleratorController.checkAppNavigationCache},
        getSITabUrl: {!$RemoteAction.ShieldAcceleratorController.getSITabUrl},
        isSIJobRunning: {!$RemoteAction.ShieldAcceleratorController.isSIJobRunning},
        resetStaleFieldInteractions: {!$RemoteAction.ShieldAcceleratorController.resetStaleFieldInteractions},
        getUpgradeAlertSettings: {!$RemoteAction.ShieldAcceleratorController.getUpgradeAlertSettings},
        setUpgradeAlertSettings: {!$RemoteAction.ShieldAcceleratorController.setUpgradeAlertSettings},
        hasPermissionDownloadAppExchangePackages: {!$RemoteAction.ShieldAcceleratorController.hasPermissionDownloadAppExchangePackages},
        upsertSingleExclusion: {!$RemoteAction.ShieldAcceleratorController.upsertSingleExclusion},
        theme: '{!$User.UITheme}',
        userPermissions: {
            canAnalyze: {!$Permission.SSC_Run_Analysis},
            canExport: {!$Permission.SSC_Export_Platform_Encryption_Analysis},
            canDownloadComplianceReport: {!$Permission.SSC_Generate_Compliance_Report},
            canEncrypt: {!$Permission.SSC_Encrypt_Fields}
        },
        images: {
            record: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#record")}',
            warning: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#warning")}',
            error: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#error")}',
            check: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#check")}',
            Pending: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#error")}',
            Platform: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#clear")}',
            Clear: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#success")}',
            Config: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#warning")}',
            Shield: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#shield")}',
            Total: '{!URLFOR($Asset.SLDS, "assets/icons/standard-sprite/svg/symbols.svg#topic2")}',
            Selected: '{!URLFOR($Asset.SLDS, "assets/icons/standard-sprite/svg/symbols.svg#task")}',
            PendingPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/Pending.png")}',
            PlatformPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/Platform.png")}',
            ClearPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/Clear.png")}',
            ConfigPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/Configuration.png")}',
            ShieldPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/Shield.png")}',
            ShieldFilterPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/ShieldFilter.png")}',
            ClearShieldPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/ClearShield2.png")}',
            ConfigShieldPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/ClearShield2.png")}',
            ClearFailedPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/ClearFailed.png")}',
            ConfigFailedPNG: '{!URLFOR($Resource.ShieldAccelerator, "/dist/ConfigurationFailed.png")}',
            SSCLogo: '{!URLFOR($Resource.ShieldAccelerator, "dist/SSCLogo.svg#ssclogo")}',
            filter: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#filterList")}',
            close: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#close")}',
            download: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#download")}',
            chevronLeft: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#chevronleft")}',
            chevronRight: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#chevronright")}',
            left: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#left")}',
            right: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#right")}',
            down: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#down")}',
            settings: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#settings")}',
            calendar: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#event")}',
            chart: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#chart")}',
            info: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#info")}',
            flag: '{!URLFOR($Asset.SLDS, "assets/icons/utility-sprite/svg/symbols.svg#lower_flag")}',
            OwnBackupLogo: '{!URLFOR($Resource.ShieldAccelerator, "/dist/OBLogo.png")}',
            clearImg: "{!URLFOR($Resource.StatusIcons, '/allClear.png')}",
            shieldImg: "{!URLFOR($Resource.StatusIcons, '/blockedShield.png')}",
            platImg: "{!URLFOR($Resource.StatusIcons, '/blockedPlat.png')}",
            configImg: "{!URLFOR($Resource.StatusIcons, '/blockedConfig.png')}",
            totalFieldsImg: "{!URLFOR($Resource.StatusIcons, '/totalFields.png')}",
            fieldsSelectedImg: "{!URLFOR($Resource.StatusIcons, '/fieldsSelected.png')}",
            fieldsExcludedImg: "{!URLFOR($Resource.StatusIcons, '/fieldsExcluded.png')}",
            pendingImg: "{!URLFOR($Resource.StatusIcons, '/pendingImg.png')}",
            emptyCheckImg: "{!URLFOR($Resource.StatusIcons, '/emptyCheck')}",
            checkedCheckImg: "{!URLFOR($Resource.StatusIcons, '/checkedCheck.png')}",
            legend: "{!URLFOR($Resource.StatusIcons, '/legend.png')}"
       }
    }
</script>
<apex:slds />
<div id="app"></div>
<script src="{!URLFOR($Resource.ShieldAccelerator, '/dist/build.js')}"/>
<link rel="stylesheet" href="{!URLFOR($Resource.ShieldAccelerator, '/dist/style.css')}"/>
</apex:page>