<apex:page title="Settings" id="SSCSettings" standardStylesheets="false" controller="revcult.SSCSettingsController" extensions="revcult.SharedExtensionController" showHeader="true" sidebar="false" docType="html-5.0">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
        <head>
            <script>
                var dataFromSF = {
                    getNotificationDetails: {!$RemoteAction.SSCSettingsController.getNotificationDetails},
                    getSubscriberDetails: {!$RemoteAction.SSCSettingsController.getSubscriberDetails},
                    deleteAlert: {!$RemoteAction.SSCSettingsController.deleteAlert},
                    deleteSubscriber: {!$RemoteAction.SSCSettingsController.deleteSubscriber},
                    addNewAlertSubscriber: {!$RemoteAction.SSCSettingsController.addNewAlertSubscriber},
                    getUserSearchResults: {!$RemoteAction.SSCSettingsController.getUserSearchResults},
                    getAlerts: {!$RemoteAction.SSCSettingsController.getAlerts},
                    getAvailableAlertOptions: {!$RemoteAction.SSCSettingsController.getAvailableAlertOptions},
                    updateSubscriptionPreferences: {!$RemoteAction.SSCSettingsController.updateSubscriptionPreferences},
                    addAlertSubscriptions: {!$RemoteAction.SSCSettingsController.addAlertSubscriptions},
                    removeAlertSubscriptions: {!$RemoteAction.SSCSettingsController.removeAlertSubscriptions},
                    getHighRiskSysPerms: {!$RemoteAction.SSCSettingsController.getHighRiskSysPerms},
                    createDefaultAlerts: {!$RemoteAction.SSCSettingsController.createDefaultAlerts},
                    deployConnectedApp: {!$RemoteAction.SSCSettingsController.deployConnectedApp},
                    createNewOrg: {!$RemoteAction.SSCSettingsController.createNewOrg},
                    getOrgs: {!$RemoteAction.SSCSettingsController.getOrgs},
                    getFeatures: {!$RemoteAction.SSCSettingsController.getFeatures},
                    getGeneralFeatures: {!$RemoteAction.SSCSettingsController.getGeneralFeatures},
                    checkMetadataApi: {!$RemoteAction.SharedExtensionController.checkMetadataApi},
                    isBooleanFeatureEnabled: {!$RemoteAction.SSCSettingsController.isBooleanFeatureEnabled},
                    resetFeatures: {!$RemoteAction.SharedExtensionController.callResetFeatures},
                    displayUpgradeWizardLink: {!$RemoteAction.SSCSettingsController.displayUpgradeWizardLink},
                    getScheduledJobs: {!$RemoteAction.SSCSettingsController.getScheduledJobs},
                    checkJobsInProgress: {!$RemoteAction.SSCSettingsController.checkJobsInProgress},
                    listOfInstalledSinglePackages: {!$RemoteAction.SSCSettingsController.listOfInstalledSinglePackages},
                    getOrgDetails: {!$RemoteAction.SSCSettingsController.getOrgDetails},
                    checkStorage: {!$RemoteAction.SSCSettingsController.checkStorage},
                    kickOffMigration: {!$RemoteAction.SSCSettingsController.kickOffMigration},
                    checkMigrationProgress: {!$RemoteAction.SSCSettingsController.checkMigrationProgress},
                    checkIfMigrationOccurred: {!$RemoteAction.SSCSettingsController.checkIfMigrationOccurred},
                    checkForUncaughtMigrationErrors: {!$RemoteAction.SSCSettingsController.checkForUncaughtMigrationErrors},
                    deleteConnection: {!$RemoteAction.SSCSettingsController.deleteConnection},
                    upsertComplianceCategories: {!$RemoteAction.SSCSettingsController.upsertComplianceCategories},
                    getUpgradeInformation: {!$RemoteAction.SSCSettingsController.getUpgradeInformation},
                    setFillRateRecordCount: {!$RemoteAction.SSCSettingsController.setFillRateRecordCount},
                    isSIJobRunning: {!$RemoteAction.SSCSettingsController.isSIJobRunning},
                    isPEAJobRunning: {!$RemoteAction.SSCSettingsController.isPEAJobRunning},
                    getUpgradeAlertSettings: {!$RemoteAction.SSCSettingsController.getUpgradeAlertSettings},
                    setUpgradeAlertSettings: {!$RemoteAction.SSCSettingsController.setUpgradeAlertSettings},
                    updateConnections: {!$RemoteAction.SSCSettingsController.updateConnections},
                    updateAlerts: {!$RemoteAction.SSCSettingsController.updateAlerts},
                    saveMetadataUpdates: {!$RemoteAction.SSCSettingsController.saveMetadataUpdates},
                    saveSensitivityLevelUpdates: {!$RemoteAction.SSCSettingsController.saveSensitivityLevelUpdates},
                    saveScheduleChanges: {!$RemoteAction.SSCSettingsController.saveScheduleChanges},
                    hasPermissionDownloadAppExchangePackages: {!$RemoteAction.SSCSettingsController.hasPermissionDownloadAppExchangePackages},
                    canSendEmail: {!$RemoteAction.SSCSettingsController.canSendEmail},
                    announcement: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#announcement")}',
                    alert: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#alert")}',
                    info: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#info")}',
                    close: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#close")}',
                    success: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#success")}',
                    check: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#check")}',
                    error: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#error")}',
                    warning: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#warning")}',
                    threeDots: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#threedots_vertical")}',
                    record: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#record")}',
                    favorite: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#favorite")}',
                    delete: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#delete")}',
                    plug: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#apex_plugin")}',
                    cloud: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#salesforce1")}',
                    add: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#add")}',
                    down: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#down")}',
                    forward: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#forward")}',
                    edit: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#edit")}',
                    edit_form: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#edit_form")}',
                    switch: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#switch")}',
                    search: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#search")}',
                    groups: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#groups")}',
                    user: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#user")}',
                    email: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#email")}',
                    clear: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#clear")}',
                    ban: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#ban")}',
                    upload: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#upload")}',
                    arrowdown: '{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#arrowdown")}',
                    RevCultLogo: '{!URLFOR($Resource.SSCSettings, "/dist/RevCultLogo.png")}',
                    SSCLogo: '{!URLFOR($Resource.SSCSettings, "dist/SSCLogo.svg#ssclogo")}',
                    sldsBase: '{!URLFOR($Asset.SLDS)}',
                    getSeverityLevels: {!$RemoteAction.SSCSettingsController.getSeverityLevels},
                    getComplianceCategories: {!$RemoteAction.SSCSettingsController.getComplianceCategories},
                    getInitialPEASchedule: {!$RemoteAction.SSCSettingsController.getInitialPEASchedule},
                    getSupportedSchedules: {!$RemoteAction.SSCSettingsController.getSupportedSchedules},
                    saveSeverityLevel: {!$RemoteAction.SSCSettingsController.saveSeverityLevel},
                    saveComplianceCategory: {!$RemoteAction.SSCSettingsController.saveComplianceCategory},
                    checkInProgress: {!$RemoteAction.SSCSettingsController.checkInProgress},
                    trackSave: {!$RemoteAction.SSCSettingsController.trackSave},
                    deleteSeverityLevel: {!$RemoteAction.SSCSettingsController.deleteSeverityLevel},
                    deleteComplianceCategory: {!$RemoteAction.SSCSettingsController.deleteComplianceCategory},
                    checkUpgrade: {!$RemoteAction.SSCSettingsController.checkUpgrade},
                    checkDcFslAccess: {!$RemoteAction.SSCSettingsController.checkDcFslAccess},   
                    checkCCFslAccess: {!$RemoteAction.SSCSettingsController.checkCCFslAccess},   
                    runArchiveClassificationsBatch: {!$RemoteAction.SSCSettingsController.runArchiveClassificationsBatch},
                    checkBatchStatus: {!$RemoteAction.SSCSettingsController.checkBatchStatus},
                    addSubscriber: {!$RemoteAction.SSCSettingsController.addSubscriber},
                    removeSubscriber: {!$RemoteAction.SSCSettingsController.removeSubscriber},
                    enableSubscription: {!$RemoteAction.SSCSettingsController.enableSubscription},
                    disableSubscription: {!$RemoteAction.SSCSettingsController.disableSubscription},
                    getFillRateRecordCount: {!$RemoteAction.SSCSettingsController.getFillRateRecordCount},
                    exportDcflsForMigration: {!$RemoteAction.SSCSettingsController.exportDcflsForMigration},
                    exportCcsForMigration: {!$RemoteAction.SSCSettingsController.exportCcsForMigration},
                    exportDclsForMigration: {!$RemoteAction.SSCSettingsController.exportDclsForMigration},
                    exportRiskRatingsForMigration: {!$RemoteAction.SSCSettingsController.exportRiskRatingsForMigration},
                    getCustomScoringPoliciesForReview: {!$RemoteAction.SSCSettingsController.getCustomScoringPoliciesForReview},
                    exportScoringPoliciesForMigration: {!$RemoteAction.SSCSettingsController.exportScoringPoliciesForMigration},
                    exportPEExclusionsForMigration: {!$RemoteAction.SSCSettingsController.exportPEExclusionsForMigration},
                    createWizardForPolicyMigration: {!$RemoteAction.SSCSettingsController.createWizardForPolicyMigration},
                    importDclsForMigration: {!$RemoteAction.SSCSettingsController.importDclsForMigration},
                    importCcsForMigration: {!$RemoteAction.SSCSettingsController.importCcsForMigration},
                    importRiskRatingsForMigration: {!$RemoteAction.SSCSettingsController.importRiskRatingsForMigration},
                    importScoringPoliciesForMigration: {!$RemoteAction.SSCSettingsController.importScoringPoliciesForMigration},
                    correctPEExclusionDurableIds: {!$RemoteAction.SSCSettingsController.correctPEExclusionDurableIds},
                    importDcflsForMigrationDml: {!$RemoteAction.SSCSettingsController.importDcflsForMigrationDml},
                    importPEExclusionsForMigration: {!$RemoteAction.SSCSettingsController.importPEExclusionsForMigration},
                    affectedExportFieldCounts: {!$RemoteAction.SSCSettingsController.affectedExportFieldCounts},
                    affectedImportFieldCounts: {!$RemoteAction.SSCSettingsController.affectedImportFieldCounts},
                    archiveClassificationProgress: {!$RemoteAction.SSCSettingsController.archiveClassificationProgress},
                    getNamespace: {!$RemoteAction.SSCSettingsController.getNamespace},
                    getPolicyMigrationExportBatchSize: {!$RemoteAction.SSCSettingsController.getPolicyMigrationExportBatchSize},
                    theme: '{!$User.UITheme}',
                    userPermissions: {
                        canModifySettings: {!$Permission.SSC_Modify_Settings},
                        runFillRates: {!$Permission.SSC_Run_Fill_Rates}
                    }      
                }
            </script>
            <apex:slds />
            <meta charset="utf-8"/>
            <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
            <title>Settings</title>
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="stylesheet" href="{!URLFOR($Resource.SSCSettings, '/dist/style.css')}"/>
        </head>
        <body>
            <div id="app"></div>
            <script src="{!URLFOR($Resource.SSCSettings, '/dist/build.js')}"></script>
        </body>
    </html>
</apex:page>